<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.LivenessMapper">

    <resultMap id="BaseResultMap" type="com.example.entity.Liveness">
        <result column="livenessId" jdbcType="INTEGER" property="livenessId" />

        <result column="userId" jdbcType="INTEGER" property="userId" />
        <result column="taskId" jdbcType="INTEGER" property="taskId" />

        <result column="onlineTime" jdbcType="DATE" property="onlineTime" />
        <result column="deadlineTime" jdbcType="DATE" property="deadlineTime" />

        <result column="temp" jdbcType="INTEGER" property="temp" />

        <result column="totalWeek" jdbcType="INTEGER" property="total_week" />
        <result column="totalMouth" jdbcType="INTEGER" property="taskStatus" />
        <result column="totalYear" jdbcType="INTEGER" property="totalYear" />
        <result column="total" jdbcType="INTEGER" property="total" />

    </resultMap>



<!--    ///   20200425      通过id获取所有数据-->
    <select id="Sel"  parameterType="int" resultType="com.example.entity.Liveness">
        select * from liveness where livenessId = #{livenessId}
    </select>
    <select id="SelByuserId"  parameterType="int" resultType="com.example.entity.Liveness">
        select * from liveness where userId = #{userId}
    </select>
<!--    20200624  主要是通过 onlineTime 和 userId查询出这个用户的最新的上线记录， 找到后后续会为其添加下线的时间 -->
    <select id="SelByOnlineTime"  parameterType="com.example.entity.Liveness" resultType="com.example.entity.Liveness">
        select * from liveness
        where
        onlineTime = #{onlineTime} and userId = #{userId}
    </select>


    <!--     ///   20200525
    // 测试用登录测试，其实这个类不需要进行登陆的，之所以这样是为了进行测试
    // 为了测试service里面如何进行逻辑操作      -->
    <select id="Enter"  parameterType="Liveness" resultType="com.example.entity.Liveness">
        select *
        from liveness
        where
        livenessId = #{livenessId}
    </select>

    <!--     ///   20200525
    // 向里面增加数据。目前有两种方法
    // 一直接插入数据      二进行数据的更改       -->
    <!--useGeneratedKeys="true" keyProperty="Liveness"-->
    <insert id="add_Liveness" parameterType="com.example.entity.Liveness" useGeneratedKeys="true" keyProperty="livenessId">
        insert into liveness (livenessId,userId,taskId,onlineTime,deadlineTime,temp,totalWeek,totalMouth,totalYear,total)
        values (#{livenessId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{taskId,jdbcType=INTEGER},
        #{onlineTime},  #{deadlineTime},
        #{temp,jdbcType=INTEGER},  #{totalWeek,jdbcType=INTEGER}, #{totalMouth,jdbcType=INTEGER}, #{totalYear,jdbcType=INTEGER},
        #{total,jdbcType=INTEGER})
    </insert>

    <!--     ///   20200528
    // 更新功能测试，目的是为了在用户的每次登录后都可以进行活跃度的更新
    //        -->
    <update id="update_Liveness"  parameterType="com.example.entity.Liveness">
        update liveness SET
        onlineTime=#{onlineTime},temp=#{temp},totalWeek=#{totalWeek},totalMouth=#{totalMouth},totalYear=#{totalYear}
        where livenessId=#{livenessId}
    </update>

<!--      20200702  赋值， 将这些取出的数据进行退出时间的更新    -->
    <update id="update_deadlineTime"  parameterType="com.example.entity.Liveness">
        update liveness SET
        deadlineTime=#{deadlineTime}
        where
        livenessId=#{livenessId} and userId=#{userId}
    </update>

<!--    // DarenSu   20200824  UserController里的登录函数enterUser，由于初次登陆需要直接在其中进行liveness活跃度表的该用户记录添加（只有userId）
            //  但是她引用的添加函数，LivenessService中enterLiveness已经有了用户记录的添加操作，并且该函数还被其它函数调用
            //  所以，需要删除enterUser里的添加的记录
            //  但是，这个活跃度更新的函数属于公共函数，直接在这里面进行修改的话，造成的bug较多，所以在enterUser理进行修改and onlineTime = ('0')
            onlineTime=#{onlineTime} and temp=#{temp} and totalWeek=#{totalWeek}
            and totalMouth=#{totalMouth} and totalYear=#{totalYear}-->
    <delete id="delete_Liveness"  parameterType="com.example.entity.Liveness">
        delete from liveness
        where
        userId = #{userId} and total = 0
    </delete>









    <insert id="add_Task" parameterType="com.example.entity.Task" useGeneratedKeys="true" keyProperty="taskId">
        insert into task (taskId, taskName,postTime, deadLine,userId,userName,coin, describe_task, totalNum,taskStatus,taskKind)
        values ( #{taskId,jdbcType=INTEGER},
        #{taskName,jdbcType=VARCHAR},
        #{postTime},
        #{deadLine},
        #{userId,jdbcType=INTEGER},
        #{userName,jdbcType=VARCHAR},
        #{coin,jdbcType=FLOAT},
        #{describe_task,jdbcType=VARCHAR},
        #{totalNum,jdbcType=INTEGER},
        #{taskStatus,jdbcType=INTEGER},
        #{taskKind,jdbcType=INTEGER}
        )
    </insert>

    <!-- 2019.7.5  获取入参为taskName的所有的数据，查询多个list    -->

    <select id="SelInfo" parameterType="string" resultType="com.example.entity.Task">
        select * from task where taskName = #{taskName}
    </select>

    <!--2019.7.6 一次性返回数据库最后面的十条数据-->
    <select id="getTen"  resultType="com.example.entity.Task">
        select * from task order by task.taskId desc limit 0,10
    </select>
    <!--2019.8.12 一次性返回数据库某id的前十条数据      有错误     mybatis中的小于等于：&lt;=   -->
    <!--2019.8.12 实现思路-小于此ID并且不找过十条数据    -->
    <select id="getNewTen"  resultType="com.example.entity.Task" parameterType="INTEGER">

        <!--select * from task where taskId in (select top 10 taskId from task where taskId &lt; mintaskId order by id desc-->
        select *
        from task
        where
        taskId <![CDATA[< ]]> #{mintaskId} and taskId <![CDATA[ > ]]> (#{mintaskId}-'11')

    </select>

    <!--2019.9.11 根据任务的taskId返回任务的List   -->
    <select id="SelTaskFromKind"  resultType="com.example.entity.Task" parameterType="INTEGER">
        select * from task where taskKind = #{taskKind} order by task.taskId desc limit 0,10
    </select>

    <!--2019.7.18  功能：查询某userId所发布的所有的任务  ，输入的参数：userId，返回的结果：List<task>-->
    <select id="SelUserId" parameterType="INTEGER" resultType="com.example.entity.Task">
        select * from task where userId =#{userId}
    </select>


    <select id="Sel_Task" resultMap="BaseResultMap">
        select * from task where taskId = #{taskId} and taskKind = ('2')
    </select>


    <delete id="del_Task" parameterType="com.example.entity.Task">
        DELETE FROM task WHERE taskId = #{taskId}
    </delete>


    <select id="check_Task" parameterType="com.example.entity.Task" resultType="com.example.entity.Task">
        SELECT *
        FROM task
        WHERE taskName = #{taskName} and userId = #{userId}
    </select>

</mapper>

